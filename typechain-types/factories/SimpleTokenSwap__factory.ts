/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SimpleTokenSwap,
  SimpleTokenSwapInterface,
} from "../SimpleTokenSwap";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IWETH",
        name: "weth",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "contract IERC20",
        name: "sellToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "contract IERC20",
        name: "buyToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "boughtAmount",
        type: "uint256",
      },
    ],
    name: "BoughtTokens",
    type: "event",
  },
  {
    inputs: [],
    name: "WETH",
    outputs: [
      {
        internalType: "contract IWETH",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "depositETH",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "sellToken",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "buyToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "swapTarget",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "swapCallData",
        type: "bytes",
      },
    ],
    name: "fillQuote",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawETH",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610ef2380380610ef2833981810160405281019061003291906100c4565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610148565b6000815190506100be81610131565b92915050565b6000602082840312156100d657600080fd5b60006100e4848285016100af565b91505092915050565b60006100f882610111565b9050919050565b600061010a826100ed565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b61013a816100ff565b811461014557600080fd5b50565b60805160601c610d8561016d6000396000818161062401526107200152610d856000f3fe6080604052600436106100595760003560e01c80638da5cb5b146100655780639e281a9814610090578063ab971612146100b9578063ad5c4648146100d5578063f14210a614610100578063f6326fb31461012957610060565b3661006057005b600080fd5b34801561007157600080fd5b5061007a610133565b6040516100879190610a72565b60405180910390f35b34801561009c57600080fd5b506100b760048036038101906100b29190610924565b610157565b005b6100d360048036038101906100ce9190610892565b61027f565b005b3480156100e157600080fd5b506100ea610622565b6040516100f79190610aed565b60405180910390f35b34801561010c57600080fd5b5061012760048036038101906101229190610960565b610646565b005b61013161071e565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101dc90610b28565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610220929190610a8d565b602060405180830381600087803b15801561023a57600080fd5b505af115801561024e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102729190610869565b61027b57600080fd5b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461030d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030490610b28565b60405180910390fd5b60008573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103489190610a72565b60206040518083038186803b15801561036057600080fd5b505afa158015610374573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103989190610989565b90508673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b81526004016103f5929190610a8d565b602060405180830381600087803b15801561040f57600080fd5b505af1158015610423573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104479190610869565b61045057600080fd5b60008473ffffffffffffffffffffffffffffffffffffffff1634858560405161047a929190610a59565b60006040518083038185875af1925050503d80600081146104b7576040519150601f19603f3d011682016040523d82523d6000602084013e6104bc565b606091505b5050905080610500576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f790610b08565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610546573d6000803e3d6000fd5b50818773ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105819190610a72565b60206040518083038186803b15801561059957600080fd5b505afa1580156105ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d19190610989565b6105db9190610b64565b91507f6dfe06ca5961b140f839316b505392ab4a18727b308bfb7d9275f8ed1cc99f0488888460405161061093929190610ab6565b60405180910390a15050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cb90610b28565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561071a573d6000803e3d6000fd5b5050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561078657600080fd5b505af115801561079a573d6000803e3d6000fd5b5050505050565b6000813590506107b081610cdc565b92915050565b6000813590506107c581610cf3565b92915050565b6000815190506107da81610d0a565b92915050565b60008083601f8401126107f257600080fd5b8235905067ffffffffffffffff81111561080b57600080fd5b60208301915083600182028301111561082357600080fd5b9250929050565b60008135905061083981610d21565b92915050565b60008135905061084e81610d38565b92915050565b60008151905061086381610d38565b92915050565b60006020828403121561087b57600080fd5b6000610889848285016107cb565b91505092915050565b60008060008060008060a087890312156108ab57600080fd5b60006108b989828a0161082a565b96505060206108ca89828a0161082a565b95505060406108db89828a016107a1565b94505060606108ec89828a016107b6565b935050608087013567ffffffffffffffff81111561090957600080fd5b61091589828a016107e0565b92509250509295509295509295565b6000806040838503121561093757600080fd5b60006109458582860161082a565b92505060206109568582860161083f565b9150509250929050565b60006020828403121561097257600080fd5b60006109808482850161083f565b91505092915050565b60006020828403121561099b57600080fd5b60006109a984828501610854565b91505092915050565b6109bb81610b98565b82525050565b60006109cd8385610b48565b93506109da838584610c4c565b82840190509392505050565b6109ef81610c04565b82525050565b6109fe81610c28565b82525050565b6000610a11601083610b53565b9150610a1c82610c8a565b602082019050919050565b6000610a34600a83610b53565b9150610a3f82610cb3565b602082019050919050565b610a5381610bfa565b82525050565b6000610a668284866109c1565b91508190509392505050565b6000602082019050610a8760008301846109b2565b92915050565b6000604082019050610aa260008301856109b2565b610aaf6020830184610a4a565b9392505050565b6000606082019050610acb60008301866109e6565b610ad860208301856109e6565b610ae56040830184610a4a565b949350505050565b6000602082019050610b0260008301846109f5565b92915050565b60006020820190508181036000830152610b2181610a04565b9050919050565b60006020820190508181036000830152610b4181610a27565b9050919050565b600081905092915050565b600082825260208201905092915050565b6000610b6f82610bfa565b9150610b7a83610bfa565b925082821015610b8d57610b8c610c5b565b5b828203905092915050565b6000610ba382610bda565b9050919050565b6000610bb582610bda565b9050919050565b60008115159050919050565b6000610bd382610b98565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610c0f82610c16565b9050919050565b6000610c2182610bda565b9050919050565b6000610c3382610c3a565b9050919050565b6000610c4582610bda565b9050919050565b82818337600083830152505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f535741505f43414c4c5f4641494c454400000000000000000000000000000000600082015250565b7f4f4e4c595f4f574e455200000000000000000000000000000000000000000000600082015250565b610ce581610b98565b8114610cf057600080fd5b50565b610cfc81610baa565b8114610d0757600080fd5b50565b610d1381610bbc565b8114610d1e57600080fd5b50565b610d2a81610bc8565b8114610d3557600080fd5b50565b610d4181610bfa565b8114610d4c57600080fd5b5056fea26469706673582212202f193d50cc726afa8e1bd8a18352db8583293901fb32179634358944a231907f64736f6c63430008040033";

type SimpleTokenSwapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimpleTokenSwapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimpleTokenSwap__factory extends ContractFactory {
  constructor(...args: SimpleTokenSwapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    weth: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SimpleTokenSwap> {
    return super.deploy(weth, overrides || {}) as Promise<SimpleTokenSwap>;
  }
  getDeployTransaction(
    weth: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(weth, overrides || {});
  }
  attach(address: string): SimpleTokenSwap {
    return super.attach(address) as SimpleTokenSwap;
  }
  connect(signer: Signer): SimpleTokenSwap__factory {
    return super.connect(signer) as SimpleTokenSwap__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimpleTokenSwapInterface {
    return new utils.Interface(_abi) as SimpleTokenSwapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SimpleTokenSwap {
    return new Contract(address, _abi, signerOrProvider) as SimpleTokenSwap;
  }
}
